<html>
  <head>

  </head>
  <body>
    <h1>Video</h1>
    <video id="video" controls></video>

    <h1>Audio</h1>
    <audio id="audio" controls>
        Your browser does not support the <code>audio</code> element.
    </audio>

    <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
    <script>
      var video = document.getElementById('video');
      var audio = document.getElementById('audio');
      if(Hls.isSupported()) {
        console.log("Streaming using HLS")

        var hls = new Hls();
        hls.loadSource('http://${X_DOCKER_IP}:8080/stream/hls/test/index.m3u8');
        hls.attachMedia(video);

        var hls = new Hls();
        hls.loadSource('http://${X_DOCKER_IP}:8080/stream/hls/test/index.m3u8');
        hls.attachMedia(audio);
     }
     // hls.js is not supported on platforms that do not have Media Source Extensions (MSE) enabled.
     // When the browser has built-in HLS support (check using `canPlayType`), we can provide an HLS manifest (i.e. .m3u8 URL) directly to the video element through the `src` property.
     // This is using the built-in support of the plain video element, without using hls.js.
     // Note: it would be more normal to wait on the 'canplay' event below however on Safari (where you are most likely to find built-in HLS support) the video.src URL must be on the user-driven
     // white-list before a 'canplay' event will be emitted; the last video event that can be reliably listened-for when the URL is not on the white-list is 'loadedmetadata'.
      else if (video.canPlayType('application/vnd.apple.mpegurl')) {
        console.log("Streaming using DASH")
        video.src = 'http://${X_DOCKER_IP}:8080/stream/dash/test/index.mpd';
        audio.src = 'http://${X_DOCKER_IP}:8080/stream/dash/test/index.mpd';
      }
      else {
        console.log("Cannot play stream")
      }
    </script>
  </body>
</html>
